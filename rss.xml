<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>夜雨飘零</title>
    <link>https://yeyupiaoling.github.io</link>
    <atom:link href="https://yeyupiaoling.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <description>记录精彩的程序人生</description>
    <generator>Solo, v4.0.0, https://solo.b3log.org</generator>
    <lastBuildDate>Tue, 07 Apr 2020 11:38:40 +0800</lastBuildDate>
    <language>zh-cn</language>
    <item>
      <title>Ubuntu server搭建Java web服务器</title>
      <link>https://yeyupiaoling.github.io/articles/2020/03/22/1584870807269.html</link>
      <description><![CDATA[<p>在这里为大家介绍如何在Ubuntu server搭建Java web服务器，输入命令时请留意作者的Ubuntu路径的变化。 1、在Ubuntu server中安装ssh，如果是购买服务器的话，这已经是安装的了，包括vim 获取超级权限  先更新安装包  开始安装ssh  ssh已经启动了  2、 安装Xshell并创建连接 安装Xshell   建立连接   单击确定 3、 Xshell实现Windows上传/下载文件到Ubuntu 3.1上传文件 获取超级权限  安装rz/sz工具  切到相应目录，在输入rz  3.2下载文件 切入到相应文件夹，输入sz 文件名   4、 用root权限安装MySQL，需要安装以下三个 apt-get install mysql-server apt-get install mysql-client apt-get install libmysqlclient-dev  测试登陆mysql数据库可以通过如下命令： mysql -u root -p   -u 表示用户名， -p 表示用户密码 5、 安装jdk 上传文件，我是放在/usr/local/ ....</p>]]></description>
      <author>yeyupiaoling</author>
      <guid>https://yeyupiaoling.github.io/articles/2020/03/22/1584870807269.html</guid>
      <category>夜雨飘零</category>
      <category>服务器</category>
      <category>Ubuntu</category>
      <category>Java</category>
      <pubDate>Sat, 04 Apr 2020 22:26:42 +0800</pubDate>
    </item>
    <item>
      <title>Android在ImageView上直接显示网络图片</title>
      <link>https://yeyupiaoling.github.io/articles/2020/03/22/1584876511290.html</link>
      <description><![CDATA[<p>在原生的ImageView中，没有一个方法是可以直接显示网络的图片的，当我们经常需要显示网络图片时，每次都有一大堆的操作，这会很麻烦，今天就教大家在ImageView上轻松显示网络图片。 自定义ImageView方法 写一个类让它继承ImageView，并增加一个 setImageURL(path)方法 import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.os.Handler; import android.os.Message; import android.util.AttributeSet; import android.widget.ImageView; import android.widget.Toast; import java.io.IOException; import java.io.InputStream; import java.net.HttpURLConnection; imp....</p>]]></description>
      <author>yeyupiaoling</author>
      <guid>https://yeyupiaoling.github.io/articles/2020/03/22/1584876511290.html</guid>
      <category>Android</category>
      <category>夜雨飘零</category>
      <pubDate>Sat, 04 Apr 2020 22:20:38 +0800</pubDate>
    </item>
    <item>
      <title>在CentOS上使用Nginx和Tomcat搭建高可用高并发网站</title>
      <link>https://yeyupiaoling.github.io/articles/2020/03/23/1584972693454.html</link>
      <description><![CDATA[<p>前言 本篇文章将介绍如何搭建使用Nginx和Tomcat的高可用高并发的网站，我们将会在CentOS系统上搭建这样一个网站后端。这个系统的架构如下：   虚拟IP地址：192.168.204.221 主虚拟服务器：192.168.204.121 备虚拟服务器：192.168.204.122 Nginx服务器1：192.168.204.123 Nginx服务器2：192.168.204.124 Tomcat服务器1：192.168.204.123 Tomcat服务器2：192.168.204.124  创建CentOS虚拟机 我们这次安装的虚拟机是CentOS迷你版，镜像为：CentOS-6.5-x86_64-minimal.iso，该镜像可以到这里下载：<a href="http://vault.centos.org/6.5/isos/x86_64/CentOS-6.5-x86_64-minimal.iso" target="_blank">http://vault.centos.org/6.5/isos/x86_64/CentOS-6.5-x86_64-minimal.iso</a>。参考笔者的这一篇文章CentOS搭建云服务平台的前半部分创建4个CentOS虚拟机，用来模仿后台的多个系统，要注意的是这篇文章CentOS搭建云服务平台安装的的桌面版，我们在本文章用的迷你版，但是安....</p>]]></description>
      <author>yeyupiaoling</author>
      <guid>https://yeyupiaoling.github.io/articles/2020/03/23/1584972693454.html</guid>
      <category>夜雨飘零</category>
      <category>服务器</category>
      <pubDate>Sat, 04 Apr 2020 22:15:53 +0800</pubDate>
    </item>
    <item>
      <title>Python的Numpy实现深度学习常用的函数</title>
      <link>https://yeyupiaoling.github.io/articles/2020/03/23/1584976095161.html</link>
      <description><![CDATA[<p>常用的激活函数 我们常用的激活函数有sigmoid，tanh，ReLU这三个函数，我们都来学习学习吧。 sigmoid函数 在深度学习中，我们经常会使用到sigmoid函数作为我们的激活函数，特别是在二分类上，sigmoid函数是比较好的一个选择，以下就是sigmoid函数的公式：</p>
<div class="vditor-math">sigmoid(x) = \frac{1}{1+e^{-x}}\tag{1}</div>
<p>sigmoid函数的坐标图是：  sigmoid函数的代码实现： import numpy as np def sigmoid(x): s = 1 / (1 + np.exp(-x)) return s  因为是使用numpy实现的sigmoid函数的，所以这个sigmoid函数可以计算实数、矢量和矩阵，如下面的就是当x是实数的时候： if <strong>name</strong> == '<strong>main</strong>': x = 3 s = sigmoid(x) print s  然后会输出： 0.952574126822  当x是矢量或者矩阵是，计算公式如下： $$ sigmoid(x) = sigmoid\begin{pmatrix} x_1 \ ....</p>]]></description>
      <author>yeyupiaoling</author>
      <guid>https://yeyupiaoling.github.io/articles/2020/03/23/1584976095161.html</guid>
      <category>夜雨飘零</category>
      <category>深度学习</category>
      <category>人工智能</category>
      <pubDate>Mon, 30 Mar 2020 23:13:14 +0800</pubDate>
    </item>
    <item>
      <title>《PaddlePaddle从入门到炼丹》十五——把预测模型部署到Android手机上</title>
      <link>https://yeyupiaoling.github.io/articles/2020/03/23/1584975263604.html</link>
      <description><![CDATA[<p>GitHub地址：<a href="https://github.com/yeyupiaoling/LearnPaddle2/tree/master/note15" target="_blank">https://github.com/yeyupiaoling/LearnPaddle2/tree/master/note15</a> 前言 现在越来越多的手机要使用到深度学习了，比如一些图像分类，目标检测，风格迁移等等，之前都是把数据提交给服务器完成的。但是提交给服务器有几点不好，首先是速度问题，图片上传到服务器需要时间，客户端接收结果也需要时间，这一来回就占用了一大半的时间，会使得整体的预测速度都变慢了，再且现在手机的性能不断提高，足以做深度学习的预测。其二是隐私问题，如果只是在本地预测，那么用户根本就不用上传图片，安全性也大大提高了。所以本章我们就来学如何包我们训练的PaddlePaddle预测模型部署到Android手机上。 编译paddle-mobile库 想要把PaddlePaddle训练好的预测库部署到Android手机上，还需要借助paddle-mobile框架。paddle-mobile框架主要是为了方便PaddlePaddle训练好的模型部署到移动设备上，比如Android手机，苹果手机，树莓派等等这些移动设备，有了paddle-mobile框架大大方便了....</p>]]></description>
      <author>yeyupiaoling</author>
      <guid>https://yeyupiaoling.github.io/articles/2020/03/23/1584975263604.html</guid>
      <category>夜雨飘零</category>
      <category>PaddlePaddle</category>
      <category>人工智能</category>
      <category>深度学习</category>
      <pubDate>Mon, 23 Mar 2020 22:54:23 +0800</pubDate>
    </item>
    <item>
      <title>《PaddlePaddle从入门到炼丹》十四——把预测模型部署在服务器</title>
      <link>https://yeyupiaoling.github.io/articles/2020/03/23/1584975208040.html</link>
      <description><![CDATA[<p>GitHub地址：<a href="https://github.com/yeyupiaoling/LearnPaddle2/tree/master/note14" target="_blank">https://github.com/yeyupiaoling/LearnPaddle2/tree/master/note14</a> 前言 如果读者使用过百度等的一些图像识别的接口，比如百度的细粒度图像识别接口，应该了解这个过程，省略其他的安全方面的考虑。这个接口大体的流程是，我们把图像上传到百度的网站上，然后服务器把这些图像转换成功矢量数据，最后就是拿这些数据传给深度学习的预测接口，比如是PaddlePaddle的预测接口，获取到预测结果，返回给客户端。这个只是简单的流程，真实的复杂性远远不止这些，但是我们只需要了解这些，然后去搭建属于我们的图像识别接口。 了解Flask 安装flask很简单，只要一条命令就可以了： pip install flask  同时我们也使用到flask_cors，所以我们也要安装这个库 pip install flask_cors  创建一个 paddle_server.py文件，然后编写一个简单的程序，了解一些如何使用这个Flask框架，首先导入所需的依赖库： import os import uuid import numpy as np....</p>]]></description>
      <author>yeyupiaoling</author>
      <guid>https://yeyupiaoling.github.io/articles/2020/03/23/1584975208040.html</guid>
      <category>夜雨飘零</category>
      <category>深度学习</category>
      <category>PaddlePaddle</category>
      <category>服务器</category>
      <pubDate>Mon, 23 Mar 2020 22:53:28 +0800</pubDate>
    </item>
    <item>
      <title>《PaddlePaddle从入门到炼丹》十三——自定义图像数生成</title>
      <link>https://yeyupiaoling.github.io/articles/2020/03/23/1584975142214.html</link>
      <description><![CDATA[<p>前言 我们在第六章介绍了生成对抗网络，并使用生成对抗网络训练mnist数据集，生成手写数字图片。那么本章我们将使用对抗生成网络训练我们自己的图片数据集，并生成图片。在第六章中我们使用的黑白的单通道图片，在这一章中，我们使用的是3通道的彩色图。 GitHub地址：<a href="https://github.com/yeyupiaoling/LearnPaddle2/tree/master/note13" target="_blank">https://github.com/yeyupiaoling/LearnPaddle2/tree/master/note13</a> 定义数据读取 我们首先创建一个image_reader.py文件，用于读取我们自己定义的图片数据集。首先导入所需的依赖包。 import os import random from multiprocessing import cpu_count import numpy as np import paddle from PIL import Image  这里的图片预处理主要是对图片进行等比例压缩和中心裁剪，这里为了避免图片在图片在resize时出现变形的情况，导致训练生成的图片不是我们真实图片的样子。这里为了增强数据集，做了随机水平翻转。最后在处理图片的时候，为了避免数据集中有单通道图片导致训练中断....</p>]]></description>
      <author>yeyupiaoling</author>
      <guid>https://yeyupiaoling.github.io/articles/2020/03/23/1584975142214.html</guid>
      <category>夜雨飘零</category>
      <category>深度学习</category>
      <category>PaddlePaddle</category>
      <category>人工智能</category>
      <pubDate>Mon, 23 Mar 2020 22:52:22 +0800</pubDate>
    </item>
    <item>
      <title>《PaddlePaddle从入门到炼丹》十二——自定义文本数据集分类</title>
      <link>https://yeyupiaoling.github.io/articles/2020/03/23/1584975038292.html</link>
      <description><![CDATA[<p>前言 我们在第五章学习了循环神经网络，在第五章中我们使用循环神经网络实现了一个文本分类的模型，不过使用的数据集是PaddlePaddle自带的一个数据集，我们并没有了解到PaddlePaddle是如何使用读取文本数据集的，那么本章我们就来学习一下如何使用PaddlePaddle训练自己的文本数据集。我们将会从中文文本数据集的制作开始介绍，一步步讲解如何使用训练一个中文文本分类神经网络模型。 GitHub地址：<a href="https://github.com/yeyupiaoling/LearnPaddle2/tree/master/note12" target="_blank">https://github.com/yeyupiaoling/LearnPaddle2/tree/master/note12</a> 爬取文本数据集 网络上一些高质量的中文文本分类数据集相当少，经过充分考虑之后，绝对自己从网络中爬取自己的中文文本数据集。在GitHub中有一个开源的爬取今日头条中文新闻标题的代码，链接地址请查看最后的参考资料。我们在这个开源代码上做一些简单修改后，就使用他来爬取数据。 创建一个download_text_data.py文件，这个就是爬取数据集的程序。首先导入相应的依赖包。 import os import random import requests im....</p>]]></description>
      <author>yeyupiaoling</author>
      <guid>https://yeyupiaoling.github.io/articles/2020/03/23/1584975038292.html</guid>
      <category>人工智能</category>
      <category>夜雨飘零</category>
      <category>PaddlePaddle</category>
      <category>深度学习</category>
      <pubDate>Mon, 23 Mar 2020 22:50:38 +0800</pubDate>
    </item>
    <item>
      <title>《PaddlePaddle从入门到炼丹》十一——自定义图像数据集识别</title>
      <link>https://yeyupiaoling.github.io/articles/2020/03/23/1584974968544.html</link>
      <description><![CDATA[<p>GitHub地址：<a href="https://github.com/yeyupiaoling/LearnPaddle2/tree/master/note11" target="_blank">https://github.com/yeyupiaoling/LearnPaddle2/tree/master/note11</a> 前言 本章将介绍如何使用PaddlePaddle训练自己的图片数据集，在之前的图像数据集中，我们都是使用PaddlePaddle自带的数据集，本章我们就来学习如何让PaddlePaddle训练我们自己的图片数据集。 爬取图像 在本章中，我们使用的是自己的图片数据集，所以我们需要弄一堆图像来制作训练的数据集。下面我们就编写一个爬虫程序，让其帮我们从百度图片中爬取相应类别的图片。 创建一个download_image.py文件用于编写爬取图片程序。首先导入所需的依赖包。 import re import uuid import requests import os import numpy import imghdr from PIL import Image  然后编写一个下载图片的函数，这个是程序核心代码。参数是下载图片的关键、保存的名字、下载图片的数量。关键字是百度搜索图片的关键。 # 获取百度图片下载图片 def download_ima....</p>]]></description>
      <author>yeyupiaoling</author>
      <guid>https://yeyupiaoling.github.io/articles/2020/03/23/1584974968544.html</guid>
      <category>PaddlePaddle</category>
      <category>夜雨飘零</category>
      <category>人工智能</category>
      <category>深度学习</category>
      <pubDate>Mon, 23 Mar 2020 22:49:28 +0800</pubDate>
    </item>
    <item>
      <title>《PaddlePaddle从入门到炼丹》十——VisualDL 训练可视化</title>
      <link>https://yeyupiaoling.github.io/articles/2020/03/23/1584974915236.html</link>
      <description><![CDATA[<p>前言 VisualDL是一个面向深度学习任务设计的可视化工具，包含了scalar、参数分布、模型结构、图像可视化等功能。可以这样说：“所见即所得”。我们可以借助VisualDL来观察我们训练的情况，方便我们对训练的模型进行分析，改善模型的收敛情况。  scalar，趋势图，可用于训练测试误差的展示  image, 图片的可视化，可用于卷积层或者其他参数的图形化展示  histogram, 用于参数分布及变化趋势的展示  graph，用于训练模型结构的可视化  以上的图像来自VisualDL的Github  既然那么方便，那么我们就来尝试一下吧。VisualDL底层采用C++编写，但是它在提供C++ SDK的同时，也支持Python SDK，我们主要是使用Python的SDK。顺便说一下，VisualDL除了支持PaddlePaddle,之外，还支持pytorch, mxnet在内的大部分主流DNN平台。 VisualDL的安装 本章只讲述在Ubuntu系统上的安装和使用，Mac的操作应该也差不多。 使用pip安装 使用pip安装非常简单，只要一条命令就够了，如下： pip3 insta....</p>]]></description>
      <author>yeyupiaoling</author>
      <guid>https://yeyupiaoling.github.io/articles/2020/03/23/1584974915236.html</guid>
      <category>PaddlePaddle</category>
      <category>人工智能</category>
      <category>深度学习</category>
      <category>夜雨飘零</category>
      <pubDate>Mon, 23 Mar 2020 22:48:35 +0800</pubDate>
    </item>
  </channel>
</rss>
